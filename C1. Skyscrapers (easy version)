/*
This is an easier version of the problem. In this version n≤1000

The outskirts of the capital are being actively built up in Berland. The company "Kernel Panic" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought n plots along the highway and is preparing to build n skyscrapers, one skyscraper per plot.

Architects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it.

Formally, let's number the plots from 1 to n. Then if the skyscraper on the i-th plot has ai floors, it must hold that ai is at most mi (1≤ai≤mi). Also there mustn't be integers j and k such that j<i<k and aj>ai<ak. Plots j and k are not required to be adjacent to i.

The company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i.e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.

Input
The first line contains a single integer n (1≤n≤1000) — the number of plots.

The second line contains the integers m1,m2,…,mn (1≤mi≤109) — the limit on the number of floors for every possible number of floors for a skyscraper on each plot.

Output
Print n integers ai — the number of floors in the plan for each skyscraper, such that all requirements are met, and the total number of floors in all skyscrapers is the maximum possible.

If there are multiple answers possible, print any of them.

Examples
inputCopy
5
1 2 3 2 1
outputCopy
1 2 3 2 1 
inputCopy
3
10 6 8
outputCopy
10 6 6 
Note
In the first example, you can build all skyscrapers with the highest possible height.

In the second test example, you cannot give the maximum height to all skyscrapers as this violates the design code restriction. The answer [10,6,6] is optimal. Note that the answer of [6,6,8] also satisfies all restrictions, but is not optimal.


*/

/*
Author: Fuadul Hasan(fuadul202@gmail.com)
BSMRSTU,Gopalganj
*/
#include <set>
#include <map>
#include <list>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <cmath>
#include <queue>
#include <bitset>
#include <vector>
#include <cstdio>
#include <string>
#include <chrono>
#include <random>
#include <cassert>
#include <complex>
#include <cstdlib>
#include <numeric>
#include <sstream>
#include <fstream>
#include <climits>
#include <stdio.h>
#include <cstring>
#include <iterator>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>
//#include<bits/stdc++.h>
using namespace std;
 
int         readline()              {int x; scanf("%d", &x); return x;}
long long   cinl()              {long long x; scanf("%I64d", &x); return x;}
void 		print(int n) 		{printf("%d ", n);}
void 		printl(long long n) 		{printf("%I64d ", n);}
 
#define  F                      first
#define  S                      second
#define  arr(a,n)				a,a+n
#define  gcd(a,b)               __gcd(a,b)
#define  lcm(a,b)               (a*b)/gcd(a,b)
#define  PI                     acos(-1.0)
#define  pb                     push_back
#define  ll                     long long int
#define  nl                     printf("\n");
#define  no                     printf("NO");
#define  yes                    printf("YES");
#define  sqr(x)					((x)*(x))
#define  min3(a,b,c)            min(a,min(b,c))
#define  min4(a,b,c,d)          min(d,min(a,min(b,c)))
#define  max3(a,b,c)            max(a,max(b,c))
#define  max4(a,b,c,d)          max(d,max(a,max(b,c)))
#define  happy					cin.tie(0);
#define  coding					ios::sync_with_stdio(false);
#define  vi                     std::vector<int>
#define  vll                    std::vector<ll>
#define  mpsi                   std::map<string, int>
#define  rep(i,b) 				for(int i=0;i<b;i++)
#define  repn(i,a,b) 			for(int i=a;i<=b;i++)
#define  rep1(i,b) 				for(int i=1;i<=b;i++)
#define  ren(i,b)		 		for(int i=b-1;i>=0;i--)
#define  all(n) 				n.begin(),n.end()
 
 
typedef  	pair<int, int> ii;
typedef 	std::vector<ii> vii;
/*
	scanf("%[^\n]%*c", str);
*/
/*..........error........*/
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {
	vector<string>v; stringstream ss(s); string x;
	while (getline(ss, x, c))v.emplace_back(x); return move(v);
} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {
	cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);
}
/*.........error...........*/
 
const int mod           = 1e9 + 7;
const int inf           = (int)2e9 + 5;
const ll  Inf           = (ll)1e18 + 5;
const int N             = 1e7 + 5;
const int nn           = 3e5 + 5;
 
int siv[2000];
int siv1[200];
 
vi v;
int aa[1006];
ll mara(int b[], int point,int n){
	for(int i=0;i<n;i++){
		aa[i] = b[i];
	}
	int i = point - 1, j = point + 1;
	int boroi = aa[point], boroj = aa[point];
	while (i >= 0 || j <= n - 1) {
		if (boroi >= aa[i] && i >= 0) {
			boroi = aa[i];
			i--;
		} else {
			if(i>=0)
			aa[i] =  boroi;
		}
		if (boroj >= aa[j] && j <= n - 1) {
			boroj = aa[j];
			j++;
		} else {
			if(j<=n-1)
			aa[j] = boroj;
		}
	}
	ll sum =0;
	for (int i = 0; i < n; i++) {
		//print(a[i]);
		sum+=(ll)aa[i];
	} return sum;
}
 
int solve()
{
	//happy coding
 
	int n = readline();
	int a[n + 1];
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
 
	ll x = 0, point = 0,boro = 0,xx=0,c[1006];
	for (int i = 0; i <n; i++) {
		xx = max(boro,mara(a,i,n));
		if(xx>boro){
			boro = xx;
 
			for(int i=0;i<n;i++){
				c[i] = aa[i];
			}
		}
	}
 
	for(int i=0;i<n;i++){
		print(c[i]);
	}
	//print(point);
	
 
	//error();
	return 0;
}
 
int main()
{
	int test = 1, tc = 0;
	//scanf("%d", &test);//(void)getchar();
	while (test--)solve();
	return 0;
}
